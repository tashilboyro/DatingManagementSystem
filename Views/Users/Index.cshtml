@model IEnumerable<DatingManagementSystem.Models.User>

@{
    ViewData["Title"] = "Users List";
}

@{
    var userName = Context.Session.GetString("UserName");
    var userEmail = Context.Session.GetString("UserEmail");
    var userID = Context.Session.GetString("UserID");
}

@Html.AntiForgeryToken()

<!-- Error alert container -->
<div id="errorAlert" class="alert alert-danger d-none" role="alert">
    An error occurred. Please try again.
</div>

<!-- Swiper Container -->
<div class="swiper-container">
    <div class="swiper-wrapper">
        <!-- User profile cards will be loaded here -->
        <div class="text-center p-5">Loading profiles...</div>
    </div>

    <!-- Swiper Navigation -->
    <div class="swiper-pagination"></div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

<!-- Swiper.js CDN -->
<link rel="stylesheet" href="/css/index.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.css">
<script src="https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.js"></script>

<script>
    // Store user details in Session Storage if they exist
    const userName = "@userName";
    const userEmail = "@userEmail";
    const userID = "@userID";

    // Check if values exist before storing
    if (userName) sessionStorage.setItem("UserName", userName);
    if (userEmail) sessionStorage.setItem("UserEmail", userEmail);
    if (userID) sessionStorage.setItem("UserID", userID);

    // Define debug flag - set to false in production
    const isDebugMode = false;

    // Custom logger function
    function debugLog(...args) {
        if (isDebugMode) {
            console.log(...args);
        }
    }

    // Retrieve and log session storage data if in debug mode
    debugLog("User Name:", sessionStorage.getItem("UserName"));
    debugLog("User Email:", sessionStorage.getItem("UserEmail"));
    debugLog("User ID:", sessionStorage.getItem("UserID"));

    // Store anti-forgery token for later use
    const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

    document.addEventListener("DOMContentLoaded", function () {
        debugLog("DOM fully loaded and parsed, calling fetchCompatibilityScores");
        fetchCompatibilityScores();
    });

    // Variable to hold the swiper instance
    let swiperInstance;

    async function fetchCompatibilityScores() {
        const swiperWrapper = document.querySelector(".swiper-wrapper");

        if (!swiperWrapper) {
            showError("Error: 'swiper-wrapper' element not found in the DOM.");
            return;
        }

        const userId = sessionStorage.getItem("UserID");
        if (!userId) {
            showError("User ID not found. Please log in again.");
            return;
        }

        try {
            const response = await fetch(`/Users/GetSortedCompatibilityScoresForLoggedInUser`);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const result = await response.json();
            debugLog("Fetched sorted scores:", result.results);

            if (!result.results || result.results.length === 0) {
                swiperWrapper.innerHTML = "<div class='text-center p-5'>No profiles found. Check back later!</div>";
                return;
            }

            swiperWrapper.innerHTML = ""; // Clear existing slides

            for (let item of result.results) {
                const user = item.user;

                if (user) {
                    // Default avatar path from app configuration or constants
                    const defaultAvatarPath = "/images/default-avatar.png";

                    const base64Image = user.profilePictureUrl
                        ? user.profilePictureUrl
                        : defaultAvatarPath;

                    const slide = document.createElement("div");
                    slide.classList.add("swiper-slide");
                    // Add data-user-id attribute for the skipUser function
                    slide.setAttribute("data-user-id", user.UserID);

                    slide.innerHTML = `
                        <div class="card profile-card text-center p-4">
                            <div class="d-flex justify-content-center align-items-center" style="flex-grow: 1;">
                                <img src="${base64Image}" class="rounded-circle border border-2 border-secondary"
                                     alt="${user.firstName}" style="width: 150px; height: 150px; object-fit: cover;">
                            </div>
                            <h5 class="mt-3 mb-1">${user.firstName}, ${user.age}</h5>
                            <p class="text-muted px-2">${user.bio || "No bio available"}</p>
                            <div class="mt-3 mb-2 d-flex justify-content-around">
                                <button class="btn btn-success rounded-pill px-3" onclick="likeUser('${user.UserID}')">Like ❤</button>
                                <button class="btn btn-danger rounded-pill px-3" onclick="skipUser('${user.userID}')">Skip ❌</button>
                            </div>
                        </div>
                    `;

                    swiperWrapper.appendChild(slide);
                } else {
                    debugLog("User data not found for an item in results");
                }
            }

            // Initialize Swiper after the content is loaded
            initializeSwiper();

        } catch (error) {
            debugLog("Error fetching compatibility scores or user details:", error);
            showError("Unable to load profiles. Please refresh the page or try again later.");
        }
    }

    function initializeSwiper() {
        // Destroy existing swiper instance if it exists
        if (swiperInstance) {
            swiperInstance.destroy(true, true);
        }

        // Initialize new swiper instance
        swiperInstance = new Swiper('.swiper-container', {
            slidesPerView: 3,
            spaceBetween: 100,
            loop: false,
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
        });
    }

    // Function to handle liking a user
    async function likeUser(likedUserId) {
        // Implement like functionality here
        debugLog("Like user with ID:", likedUserId);
        // TODO: Add API call to backend for liking users
    }

    // Function to handle skipping a user
    async function skipUser(skippedUserId) {
        try {
            // Confirm before removing
            if (!confirm("Are you sure you want to skip this user?")) {
                return;
            }

            if (!antiForgeryToken) {
                showError("Security token not found. Please refresh the page.");
                return;
            }

            // Send request to the server to skip the user
            const response = await fetch('/Users/SkipUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken
                },
                body: JSON.stringify({ skippedUserId: skippedUserId })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                // Find the slide to remove
                const slideToRemove = document.querySelector(`.swiper-slide[data-user-id="${skippedUserId}"]`);
                if (slideToRemove) {
                    // Find the index of the slide to remove
                    const slideIndex = Array.from(slideToRemove.parentElement.children).indexOf(slideToRemove);

                    // Remove the slide from the DOM
                    slideToRemove.remove();

                    // Update the swiper to reflect the change
                    if (swiperInstance) {
                        swiperInstance.update();
                    }

                    // Show a success message
                    alert("User skipped successfully");
                }
            } else {
                showError("Error skipping user: " + (result.message || "Unknown error"));
            }
        } catch (error) {
            debugLog("Error skipping user:", error);
            showError("Error skipping user. Please try again.");
        }
    }

    // Function to show error messages
    function showError(message) {
        const errorAlert = document.getElementById("errorAlert");
        if (errorAlert) {
            errorAlert.textContent = message;
            errorAlert.classList.remove("d-none");
            // Hide the error after 5 seconds
            setTimeout(() => {
                errorAlert.classList.add("d-none");
            }, 5000);
        } else {
            alert(message);
        }
    }
</script>